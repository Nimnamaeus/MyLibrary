app MyLibrary {
  wasp: {
    version: "^0.11.4"
  },
  title: "MyLibrary",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    books    Book[]
psl=}

entity Book {=psl
    id         Int    @id @default(autoincrement())
    title      String
    ISBN       String
    returnDate String
    user       User   @relation(fields: [userId], references: [id])
    userId     Int
psl=}

action createBook {
  fn: import { createBook } from "@server/actions.js",
  entities: [Book]
}

action deleteBook {
  fn: import { deleteBook } from "@server/actions.js",
  entities: [Book]
}

action borrowBook {
  fn: import { borrowBook } from "@server/actions.js",
  entities: [Book]
}

query getBooks {
  fn: import { getBooks } from "@server/queries.js",
  entities: [Book]
}

query getBook {
  fn: import { getBook } from "@server/queries.js",
  entities: [Book]
}

route BookRoute { path: "/book/:bookId", to: BookPage }
page BookPage {
  component: import { Book } from "@client/pages/Book.jsx",
  authRequired: true
}

route BooksRoute { path: "/books", to: BooksPage }
page BooksPage {
  component: import { Books } from "@client/pages/Books.jsx",
  authRequired: true
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}
